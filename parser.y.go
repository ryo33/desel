//line grammar.y:2

//TODO Put your favorite license here

// yacc source generated by ebnf2y[1]
// at 2016-04-01 15:39:52.026333071 +0900 JST
//
//  $ ebnf2y -o grammar.y -pkg=desel -start=Statements lang/grammar.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
//
//   [1]: http://github.com/cznic/ebnf2y

package desel //TODO real package name
import __yyfmt__ "fmt"

//line grammar.y:15
//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

//line grammar.y:28
type DeselSymType struct {
	yys  int
	item interface{} //TODO insert real field(s)
}

const AND = 57346
const LABEL_CHARACTERS = 57347
const MINUS = 57348
const NEWLINE = 57349
const NOT = 57350
const PREFIX_OF_COMMENT = 57351
const PREFIX_OF_ELEMENT = 57352
const PREFIX_OF_INLINE_COMMENT = 57353
const PREFIX_OF_SET = 57354
const UTF_CHARACTERS = 57355
const W = 57356

var DeselToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"AND",
	"LABEL_CHARACTERS",
	"MINUS",
	"NEWLINE",
	"NOT",
	"PREFIX_OF_COMMENT",
	"PREFIX_OF_ELEMENT",
	"PREFIX_OF_INLINE_COMMENT",
	"PREFIX_OF_SET",
	"UTF_CHARACTERS",
	"W",
	"'('",
	"')'",
	"'\"'",
	"'\\''",
}
var DeselStatenames = [...]string{}

const DeselEofCode = 1
const DeselErrCode = 2
const DeselMaxDepth = 200

//line grammar.y:668

//TODO remove demo stuff below

var _parserResult interface{}

type (
	AdditionalElementDefinition  interface{}
	AdditionalElementDefinition1 interface{}
	AdditionalSetDefinition      interface{}
	AdditionalSetDefinition1     interface{}
	Comment                      interface{}
	Element                      interface{}
	Element1                     interface{}
	ElementDefinition            interface{}
	ElementDefinition1           interface{}
	ElementDefinition2           interface{}
	ElementDefinition3           interface{}
	ElementDefinition31          interface{}
	ElementDefinitionItem        interface{}
	ElementWithOptNot            interface{}
	ElementWithPrefix            interface{}
	ElementWithPrefixAndOptNot   interface{}
	ElementsDefinition           interface{}
	ElementsDefinition1          interface{}
	ElementsDefinitionItem       interface{}
	ElementsDefinitionItem1      interface{}
	ElementsDefinitionItem2      interface{}
	Expression                   interface{}
	Expression1                  interface{}
	Expression11                 interface{}
	ExpressionAnd                interface{}
	ExpressionAnd1               interface{}
	ExpressionMin                interface{}
	HomonymousElement            interface{}
	HomonymousSet                interface{}
	InlineComment                interface{}
	Label                        interface{}
	LabelWithOptNot              interface{}
	NotWs                        interface{}
	NotWws                       interface{}
	OptNotWs                     interface{}
	OptNotWs1                    interface{}
	OptNotWws                    interface{}
	OptNotWws1                   interface{}
	Set                          interface{}
	Set1                         interface{}
	SetDefinition                interface{}
	SetDefinition1               interface{}
	SetDefinition2               interface{}
	SetDefinition3               interface{}
	SetDefinition31              interface{}
	SetDefinitionItem            interface{}
	SetWithOptNot                interface{}
	SetWithPrefix                interface{}
	SetWithPrefixAndOptNot       interface{}
	SetsDefinition               interface{}
	SetsDefinition1              interface{}
	SetsDefinitionItem           interface{}
	SetsDefinitionItem1          interface{}
	SetsDefinitionItem2          interface{}
	SetsDefinitionItem21         interface{}
	Start                        interface{}
	Statement                    interface{}
	Statements                   interface{}
	Statements1                  interface{}
	WrappedExpression            interface{}
	WrappedLabel                 interface{}
	Ws                           interface{}
	Ws1                          interface{}
	WsNewline                    interface{}
	Wws                          interface{}
)

func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}

		fmt.Println(v)
	}
}

// End of demo stuff

//line yacctab:1
var DeselExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 10,
	10, 99,
	-2, 62,
	-1, 11,
	12, 99,
	-2, 12,
	-1, 42,
	5, 56,
	-2, 53,
	-1, 46,
	5, 56,
	-2, 53,
	-1, 80,
	10, 99,
	-2, 80,
	-1, 85,
	12, 99,
	-2, 29,
	-1, 91,
	12, 24,
	14, 24,
	-2, 75,
	-1, 96,
	6, 99,
	-2, 34,
	-1, 98,
	4, 99,
	-2, 39,
	-1, 139,
	5, 56,
	-2, 53,
	-1, 144,
	5, 56,
	-2, 53,
}

const DeselNprod = 103
const DeselPrivate = 57344

var DeselTokenNames []string
var DeselStates []string

const DeselLast = 186

var DeselAct = [...]int{

	43, 103, 67, 59, 131, 11, 73, 61, 50, 64,
	57, 17, 21, 55, 9, 25, 20, 16, 42, 92,
	53, 58, 28, 94, 24, 49, 24, 151, 95, 29,
	26, 27, 44, 23, 129, 22, 26, 27, 26, 27,
	101, 95, 54, 33, 38, 71, 54, 60, 54, 75,
	76, 77, 54, 46, 41, 48, 94, 21, 52, 94,
	37, 30, 91, 26, 27, 24, 72, 82, 78, 94,
	99, 87, 83, 90, 95, 35, 93, 26, 27, 14,
	13, 17, 12, 70, 14, 97, 21, 113, 100, 45,
	32, 47, 69, 93, 51, 129, 114, 116, 105, 118,
	14, 122, 108, 111, 106, 89, 40, 132, 133, 109,
	18, 3, 2, 4, 1, 117, 145, 120, 123, 128,
	104, 79, 36, 130, 7, 127, 54, 10, 140, 74,
	99, 110, 88, 141, 142, 54, 31, 15, 5, 81,
	149, 148, 136, 137, 60, 139, 138, 75, 76, 77,
	154, 153, 152, 150, 144, 143, 147, 80, 146, 65,
	62, 63, 68, 66, 98, 115, 96, 125, 124, 107,
	84, 39, 8, 56, 119, 102, 134, 34, 19, 6,
	86, 85, 126, 112, 135, 121,
}
var DeselPact = [...]int{

	-1000, -1000, -1000, 70, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 21, 19, 48, -1000, -1000, 80, 29, -1000,
	-1000, 63, -1000, -1000, -1000, -1000, 47, 31, -1000, -1000,
	99, 18, -1000, -1000, 18, -1000, 18, 8, -10, 18,
	-1000, -1000, 84, 72, -1000, -1000, 84, -1000, 55, -1000,
	-1000, -1000, 61, -1000, 98, -1000, -1000, -1000, -1000, -1000,
	13, -1000, 60, -1000, -1000, -1000, -1000, -1000, -1000, 18,
	27, -1000, -1000, -1000, -1000, -1000, -1000, 46, -1000, -1000,
	-1000, 60, -1000, -1000, -1000, -1000, 60, -1000, 75, -1000,
	-1000, -1000, -1000, -1000, 60, -1000, 18, -1000, -1000, -1000,
	-1000, -1000, 91, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 87, 87, 101, -1000, 104, -1000,
	-1000, -1000, -1000, 18, 18, -1000, 18, -1000, 59, -1000,
	-1000, 49, -1000, -1000, -1000, 18, 26, 87, -1000, 84,
	11, -1000, 87, -1000, 84, -1000, -1000, -1000, 49, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var DeselPgo = [...]int{

	0, 185, 184, 183, 182, 14, 181, 180, 179, 178,
	177, 175, 174, 6, 173, 1, 21, 172, 171, 170,
	169, 168, 10, 166, 165, 7, 164, 9, 17, 16,
	54, 22, 3, 163, 162, 4, 161, 160, 159, 157,
	139, 138, 137, 136, 132, 131, 13, 129, 127, 2,
	124, 122, 121, 120, 118, 116, 114, 113, 112, 111,
	19, 15, 0, 110, 20, 18,
}
var DeselR1 = [...]int{

	0, 1, 2, 2, 3, 4, 4, 5, 6, 7,
	7, 8, 9, 9, 10, 10, 11, 11, 12, 12,
	13, 14, 14, 15, 16, 17, 18, 18, 19, 20,
	20, 21, 21, 22, 22, 23, 23, 24, 24, 25,
	26, 26, 27, 28, 29, 30, 31, 31, 32, 32,
	33, 34, 35, 36, 36, 37, 38, 38, 39, 40,
	40, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 49, 50, 51, 51, 52,
	53, 53, 54, 54, 55, 55, 56, 57, 57, 57,
	57, 57, 58, 59, 59, 60, 61, 61, 62, 63,
	63, 64, 65,
}
var DeselR2 = [...]int{

	0, 2, 0, 3, 2, 0, 3, 3, 2, 0,
	1, 6, 0, 1, 0, 3, 0, 2, 1, 3,
	1, 1, 1, 2, 2, 5, 0, 3, 3, 0,
	1, 0, 3, 2, 2, 0, 3, 3, 1, 2,
	0, 5, 1, 2, 2, 3, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 1, 0, 1, 2, 0,
	1, 6, 0, 1, 0, 3, 0, 2, 1, 3,
	2, 1, 1, 1, 2, 2, 5, 0, 3, 3,
	0, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 5, 3, 3, 1, 0,
	2, 2, 2,
}
var DeselChk = [...]int{

	-1000, -56, -58, -59, -57, -41, -8, -50, -17, -5,
	-48, -15, 12, 10, 9, -42, -28, -62, -63, -9,
	-29, -62, -31, 12, 5, -61, 17, 18, -31, 10,
	13, -43, 10, 14, -10, 12, -51, 13, 13, -18,
	7, -30, -65, -62, 14, -30, -65, -30, -65, 17,
	18, -30, -65, -64, -62, -46, -14, -22, -16, -32,
	-35, -25, -37, -36, -27, -38, -33, -49, -34, 8,
	11, -62, -64, -13, -47, -49, -32, -35, -64, -52,
	-39, -40, 12, -64, -19, -6, -7, 10, -44, 7,
	-29, -15, -60, -61, 10, 15, -23, -31, -26, -62,
	-65, 13, -11, -15, -53, -28, -31, -20, -29, -31,
	-45, -5, -3, 12, -62, -24, -62, -65, -62, -12,
	-5, -1, 10, -54, -21, -30, -4, -22, -35, 8,
	-25, -35, 6, 4, -30, -2, -65, -65, -64, -65,
	-62, -62, -62, -64, -65, -55, -16, -60, -35, -49,
	-46, 16, -27, -13, -15,
}
var DeselDef = [...]int{

	93, -2, 86, 92, 94, 87, 88, 89, 90, 91,
	-2, -2, 0, 0, 0, 64, 63, 0, 98, 14,
	13, 0, 74, 77, 46, 47, 0, 0, 23, 26,
	0, 99, 43, 100, 99, 44, 99, 0, 0, 99,
	7, 99, -2, 0, 99, 99, -2, 99, 59, 96,
	97, 99, 9, 66, 0, 65, 99, 71, 21, 22,
	0, 35, 0, 52, 40, 55, 54, 42, 57, 99,
	0, 102, 16, 15, 20, 72, 73, 0, 76, 78,
	-2, 0, 60, 25, 27, -2, 0, 10, 61, 101,
	70, -2, 33, 48, 0, 99, -2, 49, -2, 50,
	51, 45, 11, 75, 82, 81, 58, 31, 30, 8,
	67, 68, 99, 5, 53, 53, 0, 38, 0, 17,
	18, 99, 2, 79, 28, 99, 4, 99, 0, 99,
	36, 0, 99, 99, 99, 1, 53, 53, 69, -2,
	0, 37, 53, 19, -2, 83, 84, 85, 0, 32,
	6, 95, 41, 3, 24,
}
var DeselTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 17, 3, 3, 3, 3, 18,
	15, 16,
}
var DeselTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14,
}
var DeselTok3 = [...]int{
	0,
}

var DeselErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	DeselDebug        = 0
	DeselErrorVerbose = false
)

type DeselLexer interface {
	Lex(lval *DeselSymType) int
	Error(s string)
}

type DeselParser interface {
	Parse(DeselLexer) int
	Lookahead() int
}

type DeselParserImpl struct {
	lookahead func() int
}

func (p *DeselParserImpl) Lookahead() int {
	return p.lookahead()
}

func DeselNewParser() DeselParser {
	p := &DeselParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const DeselFlag = -1000

func DeselTokname(c int) string {
	if c >= 1 && c-1 < len(DeselToknames) {
		if DeselToknames[c-1] != "" {
			return DeselToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func DeselStatname(s int) string {
	if s >= 0 && s < len(DeselStatenames) {
		if DeselStatenames[s] != "" {
			return DeselStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func DeselErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !DeselErrorVerbose {
		return "syntax error"
	}

	for _, e := range DeselErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + DeselTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := DeselPact[state]
	for tok := TOKSTART; tok-1 < len(DeselToknames); tok++ {
		if n := base + tok; n >= 0 && n < DeselLast && DeselChk[DeselAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if DeselDef[state] == -2 {
		i := 0
		for DeselExca[i] != -1 || DeselExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; DeselExca[i] >= 0; i += 2 {
			tok := DeselExca[i]
			if tok < TOKSTART || DeselExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if DeselExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += DeselTokname(tok)
	}
	return res
}

func Desellex1(lex DeselLexer, lval *DeselSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = DeselTok1[0]
		goto out
	}
	if char < len(DeselTok1) {
		token = DeselTok1[char]
		goto out
	}
	if char >= DeselPrivate {
		if char < DeselPrivate+len(DeselTok2) {
			token = DeselTok2[char-DeselPrivate]
			goto out
		}
	}
	for i := 0; i < len(DeselTok3); i += 2 {
		token = DeselTok3[i+0]
		if token == char {
			token = DeselTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = DeselTok2[1] /* unknown char */
	}
	if DeselDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", DeselTokname(token), uint(char))
	}
	return char, token
}

func DeselParse(Desellex DeselLexer) int {
	return DeselNewParser().Parse(Desellex)
}

func (Deselrcvr *DeselParserImpl) Parse(Desellex DeselLexer) int {
	var Deseln int
	var Desellval DeselSymType
	var DeselVAL DeselSymType
	var DeselDollar []DeselSymType
	_ = DeselDollar // silence set and not used
	DeselS := make([]DeselSymType, DeselMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Deselstate := 0
	Deselchar := -1
	Deseltoken := -1 // Deselchar translated into internal numbering
	Deselrcvr.lookahead = func() int { return Deselchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Deselstate = -1
		Deselchar = -1
		Deseltoken = -1
	}()
	Deselp := -1
	goto Deselstack

ret0:
	return 0

ret1:
	return 1

Deselstack:
	/* put a state and value onto the stack */
	if DeselDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", DeselTokname(Deseltoken), DeselStatname(Deselstate))
	}

	Deselp++
	if Deselp >= len(DeselS) {
		nyys := make([]DeselSymType, len(DeselS)*2)
		copy(nyys, DeselS)
		DeselS = nyys
	}
	DeselS[Deselp] = DeselVAL
	DeselS[Deselp].yys = Deselstate

Deselnewstate:
	Deseln = DeselPact[Deselstate]
	if Deseln <= DeselFlag {
		goto Deseldefault /* simple state */
	}
	if Deselchar < 0 {
		Deselchar, Deseltoken = Desellex1(Desellex, &Desellval)
	}
	Deseln += Deseltoken
	if Deseln < 0 || Deseln >= DeselLast {
		goto Deseldefault
	}
	Deseln = DeselAct[Deseln]
	if DeselChk[Deseln] == Deseltoken { /* valid shift */
		Deselchar = -1
		Deseltoken = -1
		DeselVAL = Desellval
		Deselstate = Deseln
		if Errflag > 0 {
			Errflag--
		}
		goto Deselstack
	}

Deseldefault:
	/* default state action */
	Deseln = DeselDef[Deselstate]
	if Deseln == -2 {
		if Deselchar < 0 {
			Deselchar, Deseltoken = Desellex1(Desellex, &Desellval)
		}

		/* look through exception table */
		xi := 0
		for {
			if DeselExca[xi+0] == -1 && DeselExca[xi+1] == Deselstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Deseln = DeselExca[xi+0]
			if Deseln < 0 || Deseln == Deseltoken {
				break
			}
		}
		Deseln = DeselExca[xi+1]
		if Deseln < 0 {
			goto ret0
		}
	}
	if Deseln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Desellex.Error(DeselErrorMessage(Deselstate, Deseltoken))
			Nerrs++
			if DeselDebug >= 1 {
				__yyfmt__.Printf("%s", DeselStatname(Deselstate))
				__yyfmt__.Printf(" saw %s\n", DeselTokname(Deseltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Deselp >= 0 {
				Deseln = DeselPact[DeselS[Deselp].yys] + DeselErrCode
				if Deseln >= 0 && Deseln < DeselLast {
					Deselstate = DeselAct[Deseln] /* simulate a shift of "error" */
					if DeselChk[Deselstate] == DeselErrCode {
						goto Deselstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if DeselDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", DeselS[Deselp].yys)
				}
				Deselp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if DeselDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", DeselTokname(Deseltoken))
			}
			if Deseltoken == DeselEofCode {
				goto ret1
			}
			Deselchar = -1
			Deseltoken = -1
			goto Deselnewstate /* try again in the same state */
		}
	}

	/* reduction by production Deseln */
	if DeselDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Deseln, DeselStatname(Deselstate))
	}

	Deselnt := Deseln
	Deselpt := Deselp
	_ = Deselpt // guard against "declared and not used"

	Deselp -= DeselR2[Deseln]
	// Deselp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Deselp+1 >= len(DeselS) {
		nyys := make([]DeselSymType, len(DeselS)*2)
		copy(nyys, DeselS)
		DeselS = nyys
	}
	DeselVAL = DeselS[Deselp+1]

	/* consult goto table to find next state */
	Deseln = DeselR1[Deseln]
	Deselg := DeselPgo[Deseln]
	Deselj := Deselg + DeselS[Deselp].yys + 1

	if Deselj >= DeselLast {
		Deselstate = DeselAct[Deselg]
	} else {
		Deselstate = DeselAct[Deselj]
		if DeselChk[Deselstate] != -Deseln {
			Deselstate = DeselAct[Deselg]
		}
	}
	// dummy call; replaced with literal code
	switch Deselnt {

	case 1:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:132
		{
			DeselVAL.item = []AdditionalElementDefinition{DeselDollar[1].item, DeselDollar[2].item} //TODO 1
		}
	case 2:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:138
		{
			DeselVAL.item = []AdditionalElementDefinition1(nil) //TODO 2
		}
	case 3:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:142
		{
			DeselVAL.item = append(DeselDollar[1].item.([]AdditionalElementDefinition1), DeselDollar[2].item, DeselDollar[3].item) //TODO 3
		}
	case 4:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:148
		{
			DeselVAL.item = []AdditionalSetDefinition{DeselDollar[1].item, DeselDollar[2].item} //TODO 4
		}
	case 5:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:154
		{
			DeselVAL.item = []AdditionalSetDefinition1(nil) //TODO 5
		}
	case 6:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:158
		{
			DeselVAL.item = append(DeselDollar[1].item.([]AdditionalSetDefinition1), DeselDollar[2].item, DeselDollar[3].item) //TODO 6
		}
	case 7:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:164
		{
			DeselVAL.item = []Comment{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 7
		}
	case 8:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:170
		{
			DeselVAL.item = []Element{DeselDollar[1].item, DeselDollar[2].item} //TODO 8
		}
	case 9:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:176
		{
			DeselVAL.item = nil //TODO 9
		}
	case 10:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:180
		{
			DeselVAL.item = DeselDollar[1].item //TODO 10
		}
	case 11:
		DeselDollar = DeselS[Deselpt-6 : Deselpt+1]
		//line grammar.y:186
		{
			DeselVAL.item = []ElementDefinition{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, DeselDollar[5].item, DeselDollar[6].item} //TODO 11
		}
	case 12:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:192
		{
			DeselVAL.item = nil //TODO 12
		}
	case 13:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:196
		{
			DeselVAL.item = DeselDollar[1].item //TODO 13
		}
	case 14:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:202
		{
			DeselVAL.item = []ElementDefinition2(nil) //TODO 14
		}
	case 15:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:206
		{
			DeselVAL.item = append(DeselDollar[1].item.([]ElementDefinition2), DeselDollar[2].item, DeselDollar[3].item) //TODO 15
		}
	case 16:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:212
		{
			DeselVAL.item = []ElementDefinition3(nil) //TODO 16
		}
	case 17:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:216
		{
			DeselVAL.item = append(DeselDollar[1].item.([]ElementDefinition3), DeselDollar[2].item) //TODO 17
		}
	case 18:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:222
		{
			DeselVAL.item = DeselDollar[1].item //TODO 18
		}
	case 19:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:226
		{
			DeselVAL.item = []ElementDefinition31{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 19
		}
	case 20:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:232
		{
			DeselVAL.item = DeselDollar[1].item //TODO 20
		}
	case 21:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:238
		{
			DeselVAL.item = DeselDollar[1].item //TODO 21
		}
	case 22:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:242
		{
			DeselVAL.item = DeselDollar[1].item //TODO 22
		}
	case 23:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:248
		{
			DeselVAL.item = []ElementWithPrefix{DeselDollar[1].item, DeselDollar[2].item} //TODO 23
		}
	case 24:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:254
		{
			DeselVAL.item = []ElementWithPrefixAndOptNot{DeselDollar[1].item, DeselDollar[2].item} //TODO 24
		}
	case 25:
		DeselDollar = DeselS[Deselpt-5 : Deselpt+1]
		//line grammar.y:260
		{
			DeselVAL.item = []ElementsDefinition{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, DeselDollar[5].item} //TODO 25
		}
	case 26:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:266
		{
			DeselVAL.item = []ElementsDefinition1(nil) //TODO 26
		}
	case 27:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:270
		{
			DeselVAL.item = append(DeselDollar[1].item.([]ElementsDefinition1), DeselDollar[2].item, DeselDollar[3].item) //TODO 27
		}
	case 28:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:276
		{
			DeselVAL.item = []ElementsDefinitionItem{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 28
		}
	case 29:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:282
		{
			DeselVAL.item = nil //TODO 29
		}
	case 30:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:286
		{
			DeselVAL.item = DeselDollar[1].item //TODO 30
		}
	case 31:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:292
		{
			DeselVAL.item = []ElementsDefinitionItem2(nil) //TODO 31
		}
	case 32:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:296
		{
			DeselVAL.item = append(DeselDollar[1].item.([]ElementsDefinitionItem2), DeselDollar[2].item, DeselDollar[3].item) //TODO 32
		}
	case 33:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:302
		{
			DeselVAL.item = []Expression{DeselDollar[1].item, DeselDollar[2].item} //TODO 33
		}
	case 34:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:306
		{
			DeselVAL.item = []Expression{DeselDollar[1].item, DeselDollar[2].item} //TODO 34
		}
	case 35:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:312
		{
			DeselVAL.item = []Expression1(nil) //TODO 35
		}
	case 36:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:316
		{
			DeselVAL.item = append(DeselDollar[1].item.([]Expression1), DeselDollar[2].item, DeselDollar[3].item) //TODO 36
		}
	case 37:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:322
		{
			DeselVAL.item = []Expression11{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 37
		}
	case 38:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:326
		{
			DeselVAL.item = DeselDollar[1].item //TODO 38
		}
	case 39:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:332
		{
			DeselVAL.item = []ExpressionAnd{DeselDollar[1].item, DeselDollar[2].item} //TODO 39
		}
	case 40:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:338
		{
			DeselVAL.item = []ExpressionAnd1(nil) //TODO 40
		}
	case 41:
		DeselDollar = DeselS[Deselpt-5 : Deselpt+1]
		//line grammar.y:342
		{
			DeselVAL.item = append(DeselDollar[1].item.([]ExpressionAnd1), DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, DeselDollar[5].item) //TODO 41
		}
	case 42:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:348
		{
			DeselVAL.item = DeselDollar[1].item //TODO 42
		}
	case 43:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:354
		{
			DeselVAL.item = []HomonymousElement{DeselDollar[1].item, DeselDollar[2].item} //TODO 43
		}
	case 44:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:360
		{
			DeselVAL.item = []HomonymousSet{DeselDollar[1].item, DeselDollar[2].item} //TODO 44
		}
	case 45:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:366
		{
			DeselVAL.item = []InlineComment{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 45
		}
	case 46:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:372
		{
			DeselVAL.item = DeselDollar[1].item //TODO 46
		}
	case 47:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:376
		{
			DeselVAL.item = DeselDollar[1].item //TODO 47
		}
	case 48:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:382
		{
			DeselVAL.item = []LabelWithOptNot{DeselDollar[1].item, DeselDollar[2].item} //TODO 48
		}
	case 49:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:386
		{
			DeselVAL.item = []LabelWithOptNot{DeselDollar[1].item, DeselDollar[2].item} //TODO 49
		}
	case 50:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:392
		{
			DeselVAL.item = []NotWs{DeselDollar[1].item, DeselDollar[2].item} //TODO 50
		}
	case 51:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:398
		{
			DeselVAL.item = []NotWws{DeselDollar[1].item, DeselDollar[2].item} //TODO 51
		}
	case 52:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:404
		{
			DeselVAL.item = DeselDollar[1].item //TODO 52
		}
	case 53:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:410
		{
			DeselVAL.item = nil //TODO 53
		}
	case 54:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:414
		{
			DeselVAL.item = DeselDollar[1].item //TODO 54
		}
	case 55:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:420
		{
			DeselVAL.item = DeselDollar[1].item //TODO 55
		}
	case 56:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:426
		{
			DeselVAL.item = nil //TODO 56
		}
	case 57:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:430
		{
			DeselVAL.item = DeselDollar[1].item //TODO 57
		}
	case 58:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:436
		{
			DeselVAL.item = []Set{DeselDollar[1].item, DeselDollar[2].item} //TODO 58
		}
	case 59:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:442
		{
			DeselVAL.item = nil //TODO 59
		}
	case 60:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:446
		{
			DeselVAL.item = DeselDollar[1].item //TODO 60
		}
	case 61:
		DeselDollar = DeselS[Deselpt-6 : Deselpt+1]
		//line grammar.y:452
		{
			DeselVAL.item = []SetDefinition{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, DeselDollar[5].item, DeselDollar[6].item} //TODO 61
		}
	case 62:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:458
		{
			DeselVAL.item = nil //TODO 62
		}
	case 63:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:462
		{
			DeselVAL.item = DeselDollar[1].item //TODO 63
		}
	case 64:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:468
		{
			DeselVAL.item = []SetDefinition2(nil) //TODO 64
		}
	case 65:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:472
		{
			DeselVAL.item = append(DeselDollar[1].item.([]SetDefinition2), DeselDollar[2].item, DeselDollar[3].item) //TODO 65
		}
	case 66:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:478
		{
			DeselVAL.item = []SetDefinition3(nil) //TODO 66
		}
	case 67:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:482
		{
			DeselVAL.item = append(DeselDollar[1].item.([]SetDefinition3), DeselDollar[2].item) //TODO 67
		}
	case 68:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:488
		{
			DeselVAL.item = DeselDollar[1].item //TODO 68
		}
	case 69:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:492
		{
			DeselVAL.item = []SetDefinition31{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 69
		}
	case 70:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:498
		{
			DeselVAL.item = []SetDefinitionItem{DeselDollar[1].item, DeselDollar[2].item} //TODO 70
		}
	case 71:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:502
		{
			DeselVAL.item = DeselDollar[1].item //TODO 71
		}
	case 72:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:508
		{
			DeselVAL.item = DeselDollar[1].item //TODO 72
		}
	case 73:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:512
		{
			DeselVAL.item = DeselDollar[1].item //TODO 73
		}
	case 74:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:518
		{
			DeselVAL.item = []SetWithPrefix{DeselDollar[1].item, DeselDollar[2].item} //TODO 74
		}
	case 75:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:524
		{
			DeselVAL.item = []SetWithPrefixAndOptNot{DeselDollar[1].item, DeselDollar[2].item} //TODO 75
		}
	case 76:
		DeselDollar = DeselS[Deselpt-5 : Deselpt+1]
		//line grammar.y:530
		{
			DeselVAL.item = []SetsDefinition{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, DeselDollar[5].item} //TODO 76
		}
	case 77:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:536
		{
			DeselVAL.item = []SetsDefinition1(nil) //TODO 77
		}
	case 78:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:540
		{
			DeselVAL.item = append(DeselDollar[1].item.([]SetsDefinition1), DeselDollar[2].item, DeselDollar[3].item) //TODO 78
		}
	case 79:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:546
		{
			DeselVAL.item = []SetsDefinitionItem{DeselDollar[1].item, DeselDollar[2].item, DeselDollar[3].item} //TODO 79
		}
	case 80:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:552
		{
			DeselVAL.item = nil //TODO 80
		}
	case 81:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:556
		{
			DeselVAL.item = DeselDollar[1].item //TODO 81
		}
	case 82:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:562
		{
			DeselVAL.item = []SetsDefinitionItem2(nil) //TODO 82
		}
	case 83:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:566
		{
			DeselVAL.item = append(DeselDollar[1].item.([]SetsDefinitionItem2), DeselDollar[2].item, DeselDollar[3].item) //TODO 83
		}
	case 84:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:572
		{
			DeselVAL.item = DeselDollar[1].item //TODO 84
		}
	case 85:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:576
		{
			DeselVAL.item = DeselDollar[1].item //TODO 85
		}
	case 86:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:582
		{
			_parserResult = DeselDollar[1].item //TODO 86
		}
	case 87:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:588
		{
			DeselVAL.item = DeselDollar[1].item //TODO 87
		}
	case 88:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:592
		{
			DeselVAL.item = DeselDollar[1].item //TODO 88
		}
	case 89:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:596
		{
			DeselVAL.item = DeselDollar[1].item //TODO 89
		}
	case 90:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:600
		{
			DeselVAL.item = DeselDollar[1].item //TODO 90
		}
	case 91:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:604
		{
			DeselVAL.item = DeselDollar[1].item //TODO 91
		}
	case 92:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:610
		{
			DeselVAL.item = DeselDollar[1].item //TODO 92
		}
	case 93:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:616
		{
			DeselVAL.item = []Statements1(nil) //TODO 93
		}
	case 94:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:620
		{
			DeselVAL.item = append(DeselDollar[1].item.([]Statements1), DeselDollar[2].item) //TODO 94
		}
	case 95:
		DeselDollar = DeselS[Deselpt-5 : Deselpt+1]
		//line grammar.y:626
		{
			DeselVAL.item = []WrappedExpression{"(", DeselDollar[2].item, DeselDollar[3].item, DeselDollar[4].item, ")"} //TODO 95
		}
	case 96:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:632
		{
			DeselVAL.item = []WrappedLabel{"\"", DeselDollar[2].item, "\""} //TODO 96
		}
	case 97:
		DeselDollar = DeselS[Deselpt-3 : Deselpt+1]
		//line grammar.y:636
		{
			DeselVAL.item = []WrappedLabel{"'", DeselDollar[2].item, "'"} //TODO 97
		}
	case 98:
		DeselDollar = DeselS[Deselpt-1 : Deselpt+1]
		//line grammar.y:642
		{
			DeselVAL.item = DeselDollar[1].item //TODO 98
		}
	case 99:
		DeselDollar = DeselS[Deselpt-0 : Deselpt+1]
		//line grammar.y:648
		{
			DeselVAL.item = []Ws1(nil) //TODO 99
		}
	case 100:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:652
		{
			DeselVAL.item = append(DeselDollar[1].item.([]Ws1), DeselDollar[2].item) //TODO 100
		}
	case 101:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:658
		{
			DeselVAL.item = []WsNewline{DeselDollar[1].item, DeselDollar[2].item} //TODO 101
		}
	case 102:
		DeselDollar = DeselS[Deselpt-2 : Deselpt+1]
		//line grammar.y:664
		{
			DeselVAL.item = []Wws{DeselDollar[1].item, DeselDollar[2].item} //TODO 102
		}
	}
	goto Deselstack /* stack new state and value */
}
